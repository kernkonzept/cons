// vi:ft=c
/**
 * \page l4re_servers L4Re Servers
 *
 *  - \subpage l4re_servers_cons
 *
 *     An interactive multiplexer for
 *     console in- and output. It buffers the output from different %L4
 *     clients and allows to switch between them to redirect input.
 *
 * \page l4re_servers_cons Cons, the Console Multiplexer
 *
 * cons allows to multiplex console output from different L4 clients
 * to different L4::Vcon-capable in/output servers.
 *
 * Multiplexers and Frontends
 * --------------------------
 *
 * cons is able to connect multiple clients with multiple in/output
 * servers.
 *
 * Clients are handled by a _multiplexer_. Each multiplexer publishes
 * a server capability that allows to create new client connections. The
 * default multiplexer is normally known under the `cons` capability.
 *
 * Actual in/output is handled by separate frontends. From the
 * point-of-view of cons, a frontend consists of an IPC channel to
 * a server that speaks an appropriate server protocol. By default
 * the L4.Env.log capability is used.
 *
 * For clients cons implements the L4::Vcon and the Virtio console interface.
 * The supported frontends is limited to L4::Vcon only.
 *
 * Command Line Options
 * --------------------
 *
 * cons accepts the following command line switches:
 *
 *   * `-a`, `--show-all`
 *
 *     Initially show output from all clients.
 *
 *   * `-c <client>`, `--autoconnect <client>`
 *
 *     Automatically connect to the client with the given name.
 *     That means that output of this client will be visible and
 *     input will be routed to it.
 *
 *   * `-k`, `--keep`
 *
 *     Keep the console buffer when a client disconnects.
 *
 *   * `-n`, `--defaultname`
 *
 *     Default multiplexer capability to use. Default: `cons`.
 *
 *   * `-B <size>`, `--defaultbufsize <size>`
 *
 *     Default buffer size per client in bytes. Default: 40960
 *
 *   * `-m <prompt name>`, `--mux <prompt name>`
 *
 *     Add a new multiplexer named \<prompt name\>. This is necessary if output
 *     should be sent to different frontends.
 *
 *   * `-f <cap>`, `--frontend <cap>`
 *
 *     Set the frontend for the current multiplexer. Output for the multiplexer
 *     is then sent to the capability with the given name. The server connected
 *     to the capability needs to understand the L4::Vcon protocol.
 *
 *
 * Connecting a client
 * -------------------
 *
 *      create(backend_type, ["client_name"], ["color"], ["options"])
 *
 *   * `backend_type`
 *
 *      The type of backend that should be created for the client. The type is a positive
 *      integer and currently the following types are supported:
 *      * `L4.Proto.Log`: L4::Vcon client
 *      * `1`: Virtio console client
 *
 */
